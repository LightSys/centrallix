htdrv_alerter.c:	strcpy(drv->Name,"DHTML Alert Widget");
htdrv_alerter.c:	strcpy(drv->WidgetName,"alerter");
htdrv_alerter.c:	drv->Render = htalrtRender;
htdrv_autolayout.c:	strcpy(drv->Name,"DHTML Autolayout Driver");
htdrv_autolayout.c:	strcpy(drv->WidgetName,"autolayout");
htdrv_autolayout.c:	drv->Render = htalRender;
htdrv_autolayout.c:	strcpy(drv->Name,"DHTML Autolayout Driver - VBox");
htdrv_autolayout.c:	strcpy(drv->WidgetName,"vbox");
htdrv_autolayout.c:	drv->Render = htalRender;
htdrv_autolayout.c:	strcpy(drv->Name,"DHTML Autolayout Driver - HBox");
htdrv_autolayout.c:	strcpy(drv->WidgetName,"hbox");
htdrv_autolayout.c:	drv->Render = htalRender;
htdrv_autolayout.c:	strcpy(drv->Name,"DHTML Autolayout Driver - Spacer");
htdrv_autolayout.c:	strcpy(drv->WidgetName,"autolayoutspacer");
htdrv_autolayout.c:	drv->Render = htalRenderSpacer;
htdrv_button.c:	strcpy(drv->Name,"HTML Button Widget Driver");
htdrv_button.c:	strcpy(drv->WidgetName,"button");
htdrv_button.c:	drv->Render = htbtnRender;
htdrv_calendar.c:	strcpy(drv->Name,"DHTML Calendar View Driver");
htdrv_calendar.c:	strcpy(drv->WidgetName,"calendar");
htdrv_calendar.c:	drv->Render = htcaRender;
htdrv_chart.c:        strcpy(drv->Name, "DHTML Chart Driver");
htdrv_chart.c:        strcpy(drv->WidgetName, "chart");
htdrv_chart.c:        drv->Render = htchtRender;
htdrv_chart.c:        xaAddItem(&(drv->PseudoTypes), "chart-axis");
htdrv_chart.c:        xaAddItem(&(drv->PseudoTypes), "chart-series");
htdrv_checkbox.c:   strcpy(drv->Name,"DHTML Checkbox Driver");
htdrv_checkbox.c:   strcpy(drv->WidgetName,"checkbox");
htdrv_checkbox.c:   drv->Render = htcbRender;
htdrv_clock.c:	strcpy(drv->Name,"DHTML Local Time Clock Driver");
htdrv_clock.c:	strcpy(drv->WidgetName,"clock");
htdrv_clock.c:	drv->Render = htclRender;
htdrv_component.c:	strcpy(drv->Name,"DHTML Component Instance Driver");
htdrv_component.c:	strcpy(drv->WidgetName,"component");
htdrv_component.c:	drv->Render = htcmpRender;
htdrv_componentdecl.c:	strcpy(drv->Name,"DHTML Component Declaration Driver");
htdrv_componentdecl.c:	strcpy(drv->WidgetName,"component-decl");
htdrv_componentdecl.c:	drv->Render = htcmpdRender;
htdrv_connector.c:	strcpy(drv->Name,"Event-Action Connector Driver");
htdrv_connector.c:	strcpy(drv->WidgetName,"connector");
htdrv_connector.c:	drv->Render = htconnRender;
htdrv_datetime.c:	strcpy(drv->Name,"HTML Date/Time Widget Driver");
htdrv_datetime.c:	strcpy(drv->WidgetName,"datetime");
htdrv_datetime.c:	drv->Render = htdtRender;
htdrv_dropdown.c:   strcpy(drv->Name,"DHTML Drop Down Widget Driver");
htdrv_dropdown.c:   strcpy(drv->WidgetName,"dropdown");
htdrv_dropdown.c:   drv->Render = htddRender;
htdrv_dropdown.c:   xaAddItem(&(drv->PseudoTypes), "dropdownitem");
htdrv_editbox.c:	strcpy(drv->Name,"DHTML Single-line Editbox Driver");
htdrv_editbox.c:	strcpy(drv->WidgetName,"editbox");
htdrv_editbox.c:	drv->Render = htebRender;
htdrv_execmethod.c:	strcpy(drv->Name,"DHTML Method-Execution Widget");
htdrv_execmethod.c:	strcpy(drv->WidgetName,"execmethod");
htdrv_execmethod.c:	drv->Render = htexRender;
htdrv_fileupload.c:	strcpy(drv->Name,"DHTML File Upload Driver");
htdrv_fileupload.c:	strcpy(drv->WidgetName,"fileupload");
htdrv_fileupload.c:	drv->Render = htfuRender;
htdrv_formbar.c:   strcpy(drv->Name,"DHTML Form Bar Driver");
htdrv_formbar.c:   strcpy(drv->WidgetName,"formbar");
htdrv_formbar.c:   drv->Render = htfbRender;
htdrv_form.c:	strcpy(drv->Name,"DHTML Form Widget");
htdrv_form.c:	strcpy(drv->WidgetName,"form");
htdrv_form.c:	drv->Render = htformRender;
htdrv_formstatus.c:   strcpy(drv->Name,"DHTML Form Status Driver");
htdrv_formstatus.c:   strcpy(drv->WidgetName,"formstatus");
htdrv_formstatus.c:   drv->Render = htfsRender;
htdrv_frameset.c:	strcpy(drv->Name,"HTML Frameset Driver");
htdrv_frameset.c:	strcpy(drv->WidgetName,"frameset");
htdrv_frameset.c:	drv->Render = htsetRender;
htdrv_hints.c:	strcpy(drv->Name,"Presentation Hints pseudo-widget Driver");
htdrv_hints.c:	strcpy(drv->WidgetName,"hints");
htdrv_hints.c:	drv->Render = hthintRender;
htdrv_html.c:        strcpy(drv->Name,"HTML Textual Source Driver");
htdrv_html.c:        strcpy(drv->WidgetName,"html");
htdrv_html.c:        drv->Render = hthtmlRender;
htdrv_imagebutton.c:	strcpy(drv->Name,"HTML ImageButton Widget Driver");
htdrv_imagebutton.c:	strcpy(drv->WidgetName,"imagebutton");
htdrv_imagebutton.c:	drv->Render = htibtnRender;
htdrv_image.c:	strcpy(drv->Name,"DHTML Image Widget");
htdrv_image.c:	strcpy(drv->WidgetName,"image");
htdrv_image.c:	drv->Setup = htimgSetup;
htdrv_image.c:	drv->Render = htimgRender;
htdrv_label.c:	strcpy(drv->Name,"DHTML Single-line Label Driver");
htdrv_label.c:	strcpy(drv->WidgetName,"label");
htdrv_label.c:	drv->Render = htlblRender;
htdrv_map.c:	strcpy(drv->Name, "DHTML Map Driver");
htdrv_map.c:	strcpy(drv->WidgetName, "map");
htdrv_map.c:	drv->Setup = htmapSetup;
htdrv_map.c:	drv->Render = htmapRender;
htdrv_menu.c:	strcpy(drv->Name,"DHTML Menu Widget Driver");
htdrv_menu.c:	strcpy(drv->WidgetName,"menu");
htdrv_menu.c:	drv->Render = htmenuRender;
htdrv_menu.c:	strcpy(drv->Name,"DHTML Menu Title Driver");
htdrv_menu.c:	strcpy(drv->WidgetName,"menutitle");
htdrv_menu.c:	drv->Render = htmenuRender_ttl;
htdrv_menu.c:	strcpy(drv->Name,"DHTML Menu Separator Driver");
htdrv_menu.c:	strcpy(drv->WidgetName,"menusep");
htdrv_menu.c:	drv->Render = htmenuRender_sep;
htdrv_menu.c:	strcpy(drv->Name,"DHTML Menu Widget Item Driver");
htdrv_menu.c:	strcpy(drv->WidgetName,"menuitem");
htdrv_menu.c:	drv->Render = htmenuRender_item;
htdrv_multiscroll.c:	strcpy(drv->Name,"DHTML MultiScroll Driver");
htdrv_multiscroll.c:	strcpy(drv->WidgetName,"multiscroll");
htdrv_multiscroll.c:	drv->Render = htmsRender;
htdrv_multiscroll.c:	strcpy(drv->Name,"DHTML MultiScroll Part Driver");
htdrv_multiscroll.c:	strcpy(drv->WidgetName,"multiscrollpart");
htdrv_multiscroll.c:	drv->Render = htmsRender_part;
htdrv_objcanvas.c:	strcpy(drv->Name,"DHTML Pane Driver");
htdrv_objcanvas.c:	strcpy(drv->WidgetName,"objcanvas");
htdrv_objcanvas.c:	drv->Render = htocRender;
htdrv_osrc.c:   strcpy(drv->Name,"DHTML OSRC Driver");
htdrv_osrc.c:   strcpy(drv->WidgetName,"osrc");
htdrv_osrc.c:   drv->Render = htosrcRender;
htdrv_page.c:	strcpy(drv->Name,"HTML Page Driver");
htdrv_page.c:	strcpy(drv->WidgetName,"page");
htdrv_page.c:	drv->Render = htpageRender;
htdrv_pane.c:	strcpy(drv->Name,"DHTML Pane Driver");
htdrv_pane.c:	strcpy(drv->WidgetName,"pane");
htdrv_pane.c:	drv->Render = htpnRender;
htdrv_parameter.c:	strcpy(drv->Name,"Parameter Driver");
htdrv_parameter.c:	strcpy(drv->WidgetName,"parameter");
htdrv_parameter.c:	drv->Render = htparamRender;
htdrv_radiobutton.c:   strcpy(drv->Name,"DHTML RadioButton Driver");
htdrv_radiobutton.c:   strcpy(drv->WidgetName,"radiobuttonpanel");
htdrv_radiobutton.c:   drv->Render = htrbRender;
htdrv_repeat.c:    strcpy(drv->Name,"Repeat Object Driver");
htdrv_repeat.c:    strcpy(drv->WidgetName,"repeat");
htdrv_repeat.c:    drv->Render = htrptRender;
htdrv_rule.c:	strcpy(drv->Name,"Declarative Rule Widget Driver");
htdrv_rule.c:	strcpy(drv->WidgetName,"rule");
htdrv_rule.c:	drv->Render = htruleRender;
htdrv_scrollbar.c:	strcpy(drv->Name,"DHTML Scrollbar Widget Driver");
htdrv_scrollbar.c:	strcpy(drv->WidgetName,"scrollbar");
htdrv_scrollbar.c:	drv->Render = htsbRender;
htdrv_scrollpane.c:	strcpy(drv->Name,"HTML ScrollPane Widget Driver");
htdrv_scrollpane.c:	strcpy(drv->WidgetName,"scrollpane");
htdrv_scrollpane.c:	drv->Render = htspaneRender;
htdrv_spinner.c:	strcpy(drv->Name,"DHTML Spinner Box Driver");
htdrv_spinner.c:	strcpy(drv->WidgetName,"spinner");
htdrv_spinner.c:	drv->Render = htspnrRender;
htdrv_tab.c:	strcpy(drv->Name,"DHTML Tab Control Driver");
htdrv_tab.c:	strcpy(drv->WidgetName,"tab");
htdrv_tab.c:	drv->Render = httabRender;
htdrv_tab.c:	/*xaAddItem(&(drv->PseudoTypes), "tabpage");*/
htdrv_tab.c:	strcpy(drv->Name,"DHTML Tab Page Driver");
htdrv_tab.c:	strcpy(drv->WidgetName,"tabpage");
htdrv_tab.c:	drv->Render = httabRender_page;
htdrv_table.c:	strcpy(drv->Name,"DHTML DataTable Driver");
htdrv_table.c:	strcpy(drv->WidgetName,"table");
htdrv_table.c:	drv->Render = httblRender;
htdrv_table.c:	xaAddItem(&(drv->PseudoTypes), "table-column");
htdrv_table.c:	xaAddItem(&(drv->PseudoTypes), "table-row-detail");
htdrv_terminal.c:	strcpy(drv->Name,"DHTML Terminal Widget");
htdrv_terminal.c:	strcpy(drv->WidgetName,"terminal");
htdrv_terminal.c:	drv->Render = httermRender;
htdrv_textarea.c:	strcpy(drv->Name,"DHTML Multiline Textarea Driver");
htdrv_textarea.c:	strcpy(drv->WidgetName,"textarea");
htdrv_textarea.c:	drv->Render = httxRender;
htdrv_textbutton.c:	strcpy(drv->Name,"HTML Text Button Widget Driver");
htdrv_textbutton.c:	strcpy(drv->WidgetName,"textbutton");
htdrv_textbutton.c:	drv->Render = httbtnRender;
htdrv_timer.c:	strcpy(drv->Name,"DHTML Nonvisual Timer Widget");
htdrv_timer.c:	strcpy(drv->WidgetName,"timer");
htdrv_timer.c:	drv->Render = httmRender;
htdrv_treeview.c:	strcpy(drv->Name,"HTML Treeview Widget Driver");
htdrv_treeview.c:	strcpy(drv->WidgetName,"treeview");
htdrv_treeview.c:	drv->Render = httreeRender;
htdrv_uawindow.c:	strcpy(drv->Name,"User-Agent Window Object Driver");
htdrv_uawindow.c:	strcpy(drv->WidgetName,"window");
htdrv_uawindow.c:	drv->Render = htuawinRender;
htdrv_variable.c:	strcpy(drv->Name,"Variable Object Driver");
htdrv_variable.c:	strcpy(drv->WidgetName,"variable");
htdrv_variable.c:	drv->Render = htvblRender;
htdrv_window.c:	strcpy(drv->Name,"Child Window Widget Driver");
htdrv_window.c:	strcpy(drv->WidgetName,"childwindow");
htdrv_window.c:	drv->Render = htwinRender;
ht_render.c:	if (xhLookup(&session->UsedDrivers, drv->WidgetName) == NULL)
ht_render.c:	    xhAdd(&session->UsedDrivers, drv->WidgetName, (void*)drv);
ht_render.c:	    if (drv->Setup)
ht_render.c:		if (drv->Setup(session) < 0)
ht_render.c:	rval = drv->Render(session, widget, z);
ht_render.c:	xaAddItem(&drv->Events, (void*)event);
ht_render.c:	xaAddItem(&drv->Actions, (void*)action);
ht_render.c:	for(i=0;i<drv->Actions.nItems;i++)
ht_render.c:	    if (!strcmp(((pHtEventAction)(drv->Actions.Items[i]))->Name, eventaction))
ht_render.c:		ea = (pHtEventAction)(drv->Actions.Items[i]);
ht_render.c:	if (!ea) for(i=0;i<drv->Events.nItems;i++)
ht_render.c:	    if (!strcmp(((pHtEventAction)(drv->Events.Items[i]))->Name, eventaction))
ht_render.c:		ea = (pHtEventAction)(drv->Events.Items[i]);
ht_render.c:	xaInit(&(drv->PosParams),16);
ht_render.c:	xaInit(&(drv->Properties),16);
ht_render.c:	xaInit(&(drv->Events),16);
ht_render.c:	xaInit(&(drv->Actions),16);
ht_render.c:	xaInit(&(drv->PseudoTypes), 4);
ht_render.c:	    mssError(1,"HTR","unable to find class '%s' for widget driver '%s'",className,drv->WidgetName);
ht_render.c:	if (xhAdd(&(class->WidgetDrivers),drv->WidgetName, (void*)drv) < 0) return -1;
ht_render.c:	for (i=0;i<xaCount(&(drv->PseudoTypes));i++)
ht_render.c:	    if (xhAdd(&(class->WidgetDrivers),xaGetItem(&(drv->PseudoTypes), i), (void*)drv) < 0) return -1;
