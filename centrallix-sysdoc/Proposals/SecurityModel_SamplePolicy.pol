$Version=2$
SecurityModel_SamplePolicy "system/sec-policy"
    {
    // Mode = disable, warn, or enforce
    mode = enforce;

    // Subject identity definitions - can have multiple of these.
    //
    // Supported identity_methods:  'static', 'unix', 'altpasswd'
    // Supported auth_methods:  'none', 'static', 'unix', 'altpasswd'
    //
    anon "system/sec-policy-subjectlist"
	{
	identity_method = static;
	authentication_method = none;
	identity = "Anonymous";
	use_as_default = yes;
	}
    local "system/sec-policy-subjectlist"
	{
	identity_method = unix;
	authentication_method = unix;
	criteria = runserver(:uid == 0 or :uid >= 100);
	add_endorsement = "system:authenticated";
	}

    // Policy inclusions.
    //
    // This is used to allow additional installed applications to specify
    // their own security policy directives.
    //
    include_app_policies "system/sec-policy-inclusion"
	{
	probe_sql = 'select path = :cx__pathname, mask = :cx__pathpart2 + ":::" from object wildcard "/apps/*/secpolicy.pol" ';
	allow_inclusion = yes;
	allow_subjectlist = no;
	allow_rule = yes;
	allow_mode = no;
	}

    // Policy rules.
    //
    // object = "<objectspec>" (app:type:obj:attr)
    // subject = "<subjectspec>" (subtype:subjectname)  (subtype: u,g,r,a,l,c,e)
    // endorsement = "<endorsementspec>" (app:endorsement)
    // access = one or more of create|delete|observe|read|write|execute|noexecute
    // action = allow|deny|default_allow|default_deny  (default_xxx means it can be overridden)
    //
    protect_pol_files "system/sec-policy-rule"
	{
	object = "::/apps/*/secpolicy.pol:";
	action = deny;
	}
    protect_shl_files "system/sec-policy-rule"
	{
	object = ":system/shell::";
	action = default_deny;
	}
    }

