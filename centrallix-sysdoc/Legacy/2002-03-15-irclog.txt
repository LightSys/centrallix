Here is the IRC log from Friday, March 15, 2002.  For those of you who
didn't know, we had a spontanious meeting with Greg and the Taylor guys
via IRC.  Lots of cool stuff was flushed out and great progress was made
with the object source and form widgets.

[22:02:21] --> lehresma (~lehresma@dynam233.css.tayloru.edu) has joined #centrallix
[22:02:21] --- zahn.openprojects.net sets mode +n #centrallix
[22:02:57] --> jorupp (~jorupp@dynam232.css.tayloru.edu) has joined #centrallix
[22:04:07] --> jheth (~jheth@dynam230.css.tayloru.edu) has joined #centrallix
[22:04:58] <jheth> Hi Luke
[22:05:08] <jheth> :)
[22:05:17] <lehresma> howdy
[22:05:31] --- lehresma removes voice from jorupp
[22:06:38] <jheth> what command do you type to remove voice?
[22:07:00] <lehresma> dunno.. right click on the name on the right.
[22:07:12] --- lehresma gives channel operator status to jheth
[22:07:30] --- jheth removes voice from jorupp
[22:07:36] --- jheth removes channel operator status from jorupp
[22:07:45] --- jheth gives channel operator status to jorupp
[22:07:48] --- jorupp removes channel operator status from lehresma
[22:07:49] --- jorupp removes channel operator status from jheth
[22:07:52] --- #centrallix :You need to be a channel operator to do that
[22:15:10] --> gbeeley (~gbeeley@65.215.64.71) has joined #centrallix
[22:16:05] <gbeeley> Ok, is IRC gonna work?
[22:16:05] <jheth> Hey
[22:16:09] <lehresma> hi greg
[22:16:12] <gbeeley> Cool. :)
[22:16:14] <lehresma> :)
[22:16:14] <jheth> Yup
[22:16:21] <lehresma> I'll save a log too, btw
[22:16:28] <gbeeley> Sounds good...
[22:16:34] <jheth> I have a question about some OSML things.\
[22:16:38] <gbeeley> Ok, go for it
[22:16:56] <jheth> In the OSRC there are functions to create/modify/delete objects, this is done through the OSRC right?
[22:17:12] <jheth> Will those be similar to the queries, using the different ls__ types?
[22:17:15] <jheth> OSML sorry....
[22:17:26] <jheth> not OSRC
[22:18:08] <gbeeley> Yes - ahh I got your question on AIM but closed it.  Yes I think the best way is via different ls__req.
[22:18:29] <gbeeley> The Centrallix SQL implementation will include delete/update/insert at some point, but does not currently support those.
[22:18:52] <jheth> So the delete/update/insert will be through SQL statements?
[22:19:09] <gbeeley> No - through ls__req=blahblahblah
[22:19:20] <jheth> oh, ok...gotcha
[22:19:31] <jheth> And the different methods can be found in the net_http.c file correct?
[22:19:56] <gbeeley> Yes.  The one for updates is "setattrs".
[22:20:12] <jheth> Ahhhh, excellent.
[22:20:17] <gbeeley> You just start doing attrname=valuename after you give it the ls__req, oid, and sid.
[22:20:46] <gbeeley> If you opened for read/write in your Fetch operation, you can use those oid's if they're still open.
[22:20:47] <jheth> oh, great....thank you for that help...so I will access the data source through the ids?
[22:20:59] <jheth> Ahh, everything makes sense now!
[22:21:11] <gbeeley> Otherwise, you will need to reopen the object to get an oid.
[22:21:26] <gbeeley> Which might be preferred, depending on how you guys implement things.
[22:21:27] <jheth> Yeha
[22:21:28] <jheth> yeah
[22:21:32] <jheth> Ok
[22:21:36] <lehresma> :)
[22:21:50] <jheth> Can you tell me the delete/create methods off hand?
[22:22:02] <gbeeley> Nope.  I didn't implement em yet. <sigh>
[22:22:08] <gbeeley> Sorry...
[22:22:23] <jheth> Hah, excellent.
[22:22:50] <gbeeley> If you guys look at the feature tracker on SourceForge, there is a pending feature to use auto-primary-key generation by opening the object as something like /samples/Months.csv/rows/?
[22:23:06] <gbeeley> But why you would want to add a month I don't know :)
[22:23:17] <jheth> Ha!
[22:23:31] <lehresma> :)
[22:24:02] <gbeeley> Without auto-key generation, things get tricky, e.g., knowing the characteristics of the primary key, as in whether an int or string or concat key, etc.
[22:24:10] <jheth> I have a question about the oid now...
[22:24:13] <jheth> ah yes..
[22:24:30] <gbeeley> For ints, you can figure out the key by doing a select max()+1, etc, etc, but that only works for ints that are in ascending order.
[22:24:31] <jheth> Where do we get the oid from? :) I have the sid and the qid?
[22:24:41] <jheth> True
[22:24:51] <gbeeley> It comes in the query fetch results or else from the ls__req=open function.
[22:24:58] <gbeeley> Just a sec... gotta let someone in the building...
[22:25:02] <jheth> ok
[22:26:16] <gbeeley> Alright... I'm back.
[22:26:19] <jheth> K
[22:26:39] <jheth> I'm not opening an object anywhere, I just start in with opening a session, is that wrong?
[22:26:56] <gbeeley> You do need to open a session before you can do anything else :)
[22:27:00] <jheth> ok
[22:27:13] <gbeeley> Then you can open an object either via query results or via ls__req=open.
[22:27:24] <jheth> When I open the session, I get the sid, then when I open the query I get the qid.
[22:27:25] <gbeeley> Either way it's an open object...
[22:27:33] <gbeeley> yep..
[22:27:34] <jheth> hmm.....
[22:27:51] <gbeeley> Then you do ls__req=fetch, and get the objects, including the oid's, attributes, types, and values.
[22:28:14] <jheth> in the links array using javascript right?
[22:28:19] <gbeeley> :)
[22:28:39] <gbeeley> You can do it by hand, and then do "view source" in netscape to see what it actually looks like.
[22:28:50] <gbeeley> A bit tedious, but can be instructive :)
[22:29:02] <jheth> AHHH!!!
[22:29:05] <jheth> It just clicked!
[22:29:12] <gbeeley> Or, Jonathan Rupp's domviewer would probably work well :)
[22:29:16] <jheth> True.
[22:29:39] <jheth> I've gotten data back from the query, such as January and 31, and the oid that goes with that is the target right?
[22:29:44] <jheth> Xwhatever?
[22:29:51] <jorupp> one question -- what is that X???????? number that comes back as the target on a query request?
[22:29:58] <gbeeley> Yes, as in X083421FE or something like that
[22:30:02] <jheth> Ok.
[22:30:16] <jheth> I don't know off hand....
[22:30:29] <gbeeley> It's currently a memory address, but I'm going to be changing that in the future, so later on it will probably be a hash value of some sort.
[22:30:44] <gbeeley> But the format should be quite similar.
[22:31:00] <jheth> Ok, yeah, I understand what is happening now.
[22:31:07] <jheth> Thank you so much. I see the light!
[22:31:07] <jorupp> so using that value as an index into the replica would be a good idea?
[22:31:10] <gbeeley> The memory address thingy isn't best for security :)
[22:31:18] <jheth> ahhh, ok
[22:31:49] <jorupp> and can objects be asked for using that value, with an ls__req=open ?
[22:31:52] <gbeeley> Only if you keep the object open - otherwise if you do the fetches in groups, the oid might get repeated when the memory block gets recycled.
[22:32:04] <jheth> hmmm...
[22:32:05] <gbeeley> No.  ls__req=open requires a pathname.
[22:32:17] <jorupp> ah, so is there one that would work off that number, or not?
[22:32:21] <gbeeley> The oid allows you to do setattrs, etc.
[22:32:26] <jorupp> ah
[22:32:35] <gbeeley> When you do ls__req=open, it gives you an oid.
[22:32:36] <jorupp> that makes
[22:32:40] <jorupp> make sense that is...
[22:33:31] <gbeeley> The oid is only valid while the object is open.  It's essentially the pointer you would get back from objOpen() or objQueryFetch().
[22:34:17] <jheth> ok
[22:35:29] <gbeeley> I should probably make "queryfetch" return the "name" of the object as well as its normal attributes, since the "name" will be unique and would generally make a good index.  If you prepend the FROM source on the name, then it is unique objectsystem-wide.
[22:35:45] <jorupp> makes sense
[22:37:18] <jheth> ok....so now that we have the oid...is that used in the request object callback?
[22:37:19] <gbeeley> Oops- just remembered.  When using a "multiquery", you have to explicitly select an object's name if you want it.
[22:37:31] <jheth> Ok, thanks.
[22:37:58] <gbeeley> You may want to add that to your select list automatically as in "select objname = :name" or something like that.
[22:37:59] <jorupp> what do you mean by 'explicitly select an object's name'
[22:38:06] <jorupp> ah...ok
[22:38:18] <gbeeley> Since if you have more than one FROM item (as in a join), where the 'name
[22:38:26] <gbeeley> comes from is ambiguous
[22:39:46] <jheth> Ok
[22:40:00] <gbeeley> You can also use standard single-source queries (non-SQL) if you want.
[22:40:19] <jorupp> wanna explain the syntax for that?
[22:41:01] <gbeeley> ls__req=objquery&ls__oid=X12345678&ls__where=blahblah&ls__orderby=blahblah
[22:41:05] <gbeeley> The last two are optional.
[22:41:16] <jorupp> ok
[22:41:16] <gbeeley> Oops - include the ls__sid too.
[22:41:29] <gbeeley> You have to already have the ls__oid of the parent object already open.
[22:41:49] <gbeeley> Such as doing an open of "/samples/Months.csv/rows" and then running a query on that.
[22:41:56] <gbeeley> That uses the objOpenQuery() interface.
[22:42:01] <jorupp> how is the parent oid passed
[22:42:15] <gbeeley> The multiquery builds its result sets from these lower-level types of queries anyhow...
[22:42:27] <gbeeley> The parent oid is passed using ls__oid in the objquery ls__req.
[22:42:51] <gbeeley> You then use fetch to grab the objects, just as usual.
[22:42:58] <jorupp> ah, ok
[22:43:23] <gbeeley> However, most folks will likely get more out of using normal SQL stuff.
[22:43:51] <gbeeley> e.g. "multiquery" ls__req.
[22:44:41] <jheth> Is the ls__req=fetch the same as ls__req=queryfetch?
[22:44:47] <jheth> I've seen you type both.
[22:45:02] <gbeeley> Oops.  There is no ls__req=fetch.  Just queryfetch.
[22:45:06] <jheth> Ok, thanks.
[22:45:58] <jheth> Ok, back to the updating an object.....
[22:46:18] <gbeeley> yyyeeeesssss....
[22:46:37] <jheth> After the ls__mode, req, sid, oid, what is the syntax for the setattrs?
[22:46:45] <jheth> Oh wait...
[22:46:54] <gbeeley> just &attrname=attrvalue&attrname=attrvalue etc etc
[22:47:02] <jheth> ls_req=setattrs&attrname=......
[22:47:17] <jheth> Ok, thought so....
[22:47:19] <gbeeley> as in &fullname=MonthThirteen&num_days=1400
[22:47:34] <jheth> ahhh, ok...excellent...
[22:47:44] <jheth> and the ls__req is setattrs right?
[22:47:55] <jheth> I'm just double checking...I got confused for a bit.
[22:48:00] <gbeeley> Yes.  See the nht_internal_OSML() function in netdrivers/net_http.c
[22:48:06] <jheth> oh, ok
[22:48:20] <gbeeley> Gets called when ls__mode=osml.
[22:48:51] <jheth> Ok, thanks.
[22:49:13] <jheth> Why is it &fullname=adsf, instead of full_name=asdf?
[22:49:23] <jheth> wait...I'm retarded....
[22:49:37] <gbeeley> Sorry...
[22:49:52] <jheth> I didn't realize the leading & wasn't part of fullname.
[22:49:53] <gbeeley> I don't have the Months.spec file open in front of me right now.
[22:49:56] <jheth> It was the & in the URL.
[22:50:07] <gbeeley> yep :)
[22:50:08] <jheth> No, it's fine, I was not thinking right.
[22:50:39] <jheth> And I don't need quotes around string values?
[22:50:56] <gbeeley> No.  Just make sure you escape the appropriate characters.
[22:51:03] <jheth> Ok, good call.
[22:51:07] <gbeeley> The OSML already knows what's a string and what's not based on the data source.
[22:51:38] <jheth> Oh ok..nice
[22:52:47] <jheth> I have a question about a call back now, the request object. Is this similar to what we've been talking about....get the oid and return the record for that?
[22:53:04] <gbeeley> Hmmm.. need some context
[22:53:09] <jheth> ok...sorry....
[22:53:53] <jheth> There is a call back function in the OSRC that is called request object.
[22:54:10] <gbeeley> <thumbing through documentation...> :)
[22:54:38] <gbeeley> Ok I see it.
[22:54:54] <jheth> As am I....
[22:55:06] <jheth> It says: the form widget needs the data for one or more specific objects.
[22:55:43] <jheth> So I assume the form passes an oid to me and I pass back the data corresponding to that, from the replica?
[22:56:20] <gbeeley> just a sec...
[22:56:28] <jheth> k
[22:56:44] <jheth> HTFormsInterfaces.txt in sys-doc...as I'm sure you know.... :)
[22:56:51] <gbeeley> yep
[22:57:26] <gbeeley> One good reason to put design thoughts in writing.... that way I can remember them :)  Currently attempting to remember :)
[22:57:52] <gbeeley> Ok.  Here goes....
[22:58:05] <jheth> haha, ok
[22:58:16] <gbeeley> This relates to steps i, j, and k in the 13-step process.
[22:58:32] <gbeeley> Problem with doing it via oid, is that the osrc hasn't told the form what the oid's are yet.
[22:58:38] <jheth> I was trying to find that earlier, I couldn't.....
[22:58:47] <jheth> ok....
[22:58:55] <gbeeley> Line @407
[22:59:14] <jheth> ok, thanks.
[23:00:18] <gbeeley> I suspect the form will need to say "ok, I want the first 25 objects you've got".  The osrc can then either return an oid list, to which the form responds by asking for more information, or more simply, could return the objects with their data, including the oid.
[23:00:30] <gbeeley> Where 25 is arbitrary.
[23:00:42] <gbeeley> Pick a number that works smoothly.
[23:00:43] <jheth> ok, that makes sense.
[23:00:46] <jheth> yeah.
[23:01:08] <jheth> So what is the difference between the request object and the actual querying?
[23:01:24] <gbeeley> The form may need to say, "I want object #1", then later "I want object #2".
[23:01:38] <gbeeley> So, by order of returned results rather than by oid
[23:02:02] <gbeeley> That may work better if the form doesn't know what the osrc set it's ls__rowcount to.
[23:02:11] <gbeeley> In its queryfetch operation.
[23:02:52] <jorupp> I was thinking that the form would just use first, next, last, previous and let the osrc worry about caching things...
[23:02:53] <gbeeley> But if an object ever gets deleted from the osrc's replica, then the numbers get goofed up.  Might be better to *mark* an object deleted but leave it in the array rather than splice()ing around.
[23:03:12] <gbeeley> That may work.
[23:03:24] <jheth> Ok, so the there is an original query to get those 25 records...the a user can request them individually, is that right?
[23:03:31] <jheth> Yeah, that would work great.
[23:03:44] <gbeeley> osrc->Centrallix "Fetch me 25 rows"
[23:03:58] <gbeeley> Centrallix->osrc "Heres some rows"
[23:04:14] <gbeeley> osrc->form "I've got some data coming in here..."
[23:04:27] <jorupp> form->osrc "Give me row 1"
[23:04:44] <jorupp> osrc->form "Here's the data you asked for" (row 1)
[23:04:45] <gbeeley> You type faster than I :)
[23:04:48] <jorupp> that sound right?
[23:04:54] <jheth> Yeah, sounds good!
[23:04:55] <gbeeley> That sounds right.
[23:04:56] <jheth> :)
[23:05:33] <gbeeley> The osrc need not queryfetch more rows until a form or table demands it.
[23:06:03] <gbeeley> but it can if it wants.  Problem is if the query returns x-zillion rows....
[23:06:16] <gbeeley> ....the first row will be long in showing up on the user's screen.
[23:06:53] <jorupp> right, so pick some sensible number to cache
[23:07:53] <gbeeley> yes.
[23:08:20] <gbeeley> But, remember since the OSML doesn't (yet) support fetching backwards, don't discard unless you must.
[23:08:26] <jorupp> should the osrc provide first, last, prev, next functions?
[23:09:14] <gbeeley> It probably should return objects by number, as in the nth object returned.
[23:09:31] <gbeeley> Remember, a "dynamic" mode table will grab bunches of em from the osrc.
[23:09:55] <gbeeley> And remember, a row may have "datafocus" when many rows past it have already been retrieved into a dynamic mode table.
[23:10:54] <gbeeley> That issue of "datafocus" might get interesting.  If a user clicks a row in a table, you may need to have it tell the osrc which one has focus, and then the osrc will tell that to any attached forms/tables that are in View mode.
[23:12:37] <jheth> Ok
[23:13:57] <gbeeley> Sorry if I added too much complexity to the discussion right now...
[23:14:13] <jorupp> we need the complexity to get it right....
[23:14:20] <jorupp> but, yeah, it's pretty complex....
[23:14:33] <jheth> Yeah, it's fine, John and I were just discussing it all over here.
[23:14:38] <jorupp> that's why the long delays in the conversation....we're trying to process it here...
[23:15:12] <gbeeley> Ok, cool.
[23:15:22] <gbeeley> User interface design isn't trivial :)
[23:15:52] <gbeeley> But I think it's great that you guys are getting this experience.  When you use UI development tools in the future, you'll have a pretty nifty idea of what goes on under the hood.
[23:16:12] <jorupp> :w
[23:16:20] <jorupp> whoops...thought this was a vim window...
[23:16:37] <gbeeley> I thought that was a pretty puzzling smiley :)
[23:16:41] <jorupp> hehe
[23:22:01] <lehresma> :3
[23:26:14] <lehresma> WE'RE GETTING DATA!!
[23:26:38] <gbeeley> Just committed some changes to the repository - now you get the metadata attributes of objects whenever they are available.
[23:26:57] <gbeeley> Woohoo!
[23:27:14] <lehresma> (we're getting pizza too, but that's not quite as exciting)
[23:27:38] <gbeeley> I knew there was a disadvantage to telecommuting to this session :)
[23:29:57] <jorupp> greg....you patched my build....I was going for 1000....
[23:30:06] <jorupp> nm....
[23:30:15] <jorupp> you didn't change the subbuild...
[23:30:19] * lehresma whaps jorupp upside the head.
[23:30:54] * jorupp would kick lehresma if he wasn't keeping the log....
[23:32:23] <gbeeley> That build/subbuild stuff was a product of the original "dumb+simple" revision control that the project used...
[23:32:42] <gbeeley> I've kept it around for effect ;)
[23:34:20] <jorupp> well, I'm close to 1000...(919 to be exact)...
[23:34:36] <jorupp> shows how much JS debugging I did before I wrote that DOM viewer....
[23:36:12] <gbeeley> Look that the "make backup" target in the Makefile to see what kind of revision control I used ;)
[23:37:24] <gbeeley> The project dates back to when I was annoyed with revision control after some bad experiences with RCS.
[23:37:28] <gbeeley> CVS is much better :)
[23:41:47] <lehresma> heh.. cvs is very cool.
[23:45:14] <jorupp> in the form, if the user is in Modify mode and clicks 'next', should I save without prompting, or what?
[23:45:41] <jorupp> or use my horrible three-option prompting scheme to find out (double-confirm)
[23:46:21] <gbeeley> You will need to ask the user to save, discard, or cancel.
[23:46:41] <gbeeley> You may want to create a window as in htdrv_window.c type of window, to make it easier.
[23:46:47] <jorupp> ok....any better way that a double confirm
[23:46:57] <gbeeley> Though that will then require doing a callback mechanism ;)
[23:47:18] <jorupp> yeah.....I thought of doing some stuff with window.open, but didn't
[23:47:22] <jorupp> what should I use?
[23:47:29] <gbeeley> Create a layer.
[23:47:41] <jorupp> and then....
[23:47:59] <jorupp> wouldn't that be duplicating a whole bunch of code?
[23:48:01] <gbeeley> Hide it when the user selects one of the three options.  Then, you proceed with your operation, etc.
[23:48:10] <jorupp> ah.....
[23:48:42] <jorupp> so I should make a hidden layer at the start, then just show it for an answer, then resume
[23:48:43] <jorupp> ok
[23:49:04] <gbeeley> It wouldn't need to be a full window a la htdrv_window.c.  But you could have the user create a custom window of that sort, in the app file, and then specify it to the form so the form knows which htdrv_window window to use.
[23:49:21] <gbeeley> Your choice.
[23:49:44] <jorupp> so have the appfile create and specify a window to use for 3-way confirm operations?
[23:49:59] <gbeeley> You could.  That way you could customize the look & feel of that window.
[23:50:24] <gbeeley> Then add an attribute in the app file for the form and such, to specify the window to use.
[23:50:51] <jorupp> or use a confirm_current (like fm_current) style detection mechanism?
[23:51:13] <gbeeley> If you do that, then you have to embed the whole app inside the confirm window, which won't work :)
[23:51:23] <jorupp> ah....yeah....forgot about that...
[23:52:24] <jorupp> so the form should have a paramter specifying the window to use for that, and then provide what 3 methods?
[23:52:24] <gbeeley> Getting the buttons to call your custom callbacks, though, might be interesting.
[23:53:57] <gbeeley> The logic inside the buttons in the custom window will need to notify you somehow.  You could have the form widget go sniffing through the layers in the custom window looking for buttons with certain names, and then "hotwire" their Click event functions.
[23:54:01] <jorupp> So I could just build a (hidden) window in the .app file that prompts for the information, then use connectors to get the callbacks to the form?
[23:54:23] <jorupp> and then hide it again afterwards?
[23:54:27] <gbeeley> You probably couldn't use connectors - you may want to share the custom window between multiple forms and such.
[23:54:34] <jorupp> ah
[23:54:51] <jorupp> so I need to re-write the window to allow this?
[23:54:54] <jorupp> darn..
[23:55:20] <gbeeley> Probably not.
[23:56:14] <gbeeley> You probably just need to sniff out the buttons, and then do something like:  cancelbutton.EventClick = my_callback_function;
[23:56:51] <jorupp> when I show the window?
[23:56:54] <gbeeley> You can locate the buttons via recursively searching through the document.layers[] arrays.
[23:57:12] <gbeeley> The form *could* locate the window and sniff the buttons out, on form_init().
[23:57:13] <jorupp> should I require it to have a certain name or what?
[23:57:27] <gbeeley> Certain name... probably yes.
[23:57:31] <jorupp> woudln't it be better to have it as a paramter to the form?
[23:57:39] <gbeeley> That will overload the globals, but...
[23:57:40] <jorupp> so different forms could use different windows?
[23:57:58] <gbeeley> Oh - the window shouldn't have to have a certain name.  I was thinking of the buttons.
[23:58:17] <gbeeley> But you could specify the button names also in the form attributes.  That way you don't have to go searching for them manually.
[23:58:50] <jorupp> ok, I can see requiring a certain button name....just specifying the window name in the parameters
[23:59:36] <gbeeley> But be aware that requiring a certain button name will overload the global variable referencing that button.  So, it will be necessary to not refer to those buttons by name anywhere else...
[23:59:53] <gbeeley> But that's probably ok
[00:01:06] <gbeeley> BTW, if you want to let the user put connectors on the buttons as well as you hotwiring them, you'll need to follow the same logic that cn_add() does (in htdrv_connector.c) to add your callback function to an array called "EventClick" rather than just setting EventClick to the callback function.
[00:01:37] <gbeeley> Either will work when the event fires, but to have more than one thing activated on click, you need to use the array form.
[00:01:54] <gbeeley> But I don't see users putting connectors on those buttons.  Might be good to forbid it.
[00:02:53] <jorupp> so, basically, I should create a hidden window (in the .app file), and specify it's name to the form, and on that window, have three buttons (with specific names), and override their EventClick function with my callback, right?
[00:03:05] <gbeeley> yep
[00:03:14] <jorupp> ok, looks like I have some work to do....
[00:03:42] <gbeeley> I evidently didn't provide a way to put the button's name as one of its attributes.  I'm working on that as we speak...
[00:03:49] <gbeeley> javascript attributes, that is
[00:04:13] <jorupp> will I need that?
[00:06:38] <gbeeley> To find the buttons, yes.
[00:07:14] <jorupp> ah....yeah, that would be a good idea....
[00:07:21] <jorupp> do text buttons use a global variable?
[00:09:15] <jorupp> ok, I've started on the callbacks, but the pizza is here...
[00:10:36] <gbeeley> Ok, commit done.
[00:10:46] <gbeeley> property name is "buttonName".
[00:11:21] <gbeeley> Textbuttons do have a global, but don't depend on that - if you have more than one custom dialog window, you won't know which one you're referring to via the global.
[00:27:58] <jorupp> we're back
[00:28:10] <lehresma> back
[00:28:15] <jorupp> right....do we really need that global?
[00:28:48] <gbeeley> Hmmm...  it puts it in there currently.  Is it causing trouble?
[00:29:03] <jorupp> no, not yet....
[00:29:16] <jorupp> what uses it?
[00:29:29] <gbeeley> Scripting, later on, might.
[00:29:34] <jorupp> ah....ok...
[00:30:05] <gbeeley> And I suppose if the thing had any Actions on it (such as force-it-to-click maybe?)
[00:30:09] >gbeeley< CTCP CLIENTINFO
[00:30:18] <jorupp> ok
[00:40:58] <lehresma> I'm heading out, greg..
[00:41:06] <lehresma> talk to you later!
[00:41:09] <gbeeley> Out as in zzz?
[00:41:26] <lehresma> :)  Ya.. I pulled an all-nighter last night, and I'm really fighting it now..
[00:41:40] <gbeeley> wow.... see ya!
[00:41:44] <lehresma> later!
