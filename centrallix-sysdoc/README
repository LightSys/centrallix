# README
Author: Seth Bird (Thr4wn)

Date: August 2008

This file was created by Seth Bird (Thr4wn) to introduce developers to how the entire centrallix system as a whole works in a way that should (hopefully), reduce the learning curve.

Please edit this file if there are any mistakes.

Also, online documentation can be found at http://www.centrallix.net/docs/docs.php

legacy documentation can be found in the legacy folder.

A function flow-chart for server-side functions is stored in function_flow-chart.ps (which was generated by `dot` program (graphviz.com) from function_flow-chart.dot file (a text file)). Please keep this file up-to-date.

If someone wants to create one for client-side javsascript flow control, that would be wonderful.

## Table of Contents
- [README](#readme)
  - [Table of Contents](#table-of-contents)
  - [Centrallix](#centrallix)
    - [The Object System Management Layer](#the-object-system-management-layer)
    - [Traversing Object System like a filesystem](#traversing-object-system-like-a-filesystem)
      - [ObjSys-path (ObjSys-pathname)](#objsys-path-objsys-pathname)
      - [Directly testing/using OSML](#directly-testingusing-osml)
      - [ObjSys-SQL](#objsys-sql)
    - [The Widget Layer](#the-widget-layer)
      - [Components](#components)
      - [Events in the Widget Layer](#events-in-the-widget-layer)
    - [The HTTP implementation of Centrallix](#the-http-implementation-of-centrallix)
      - [Traffic Handling](#traffic-handling)
        - [Server-Side HTML generation](#server-side-html-generation)
        - [Client-Side javascript information](#client-side-javascript-information)
  - [Misc Notes](#misc-notes)

## Centrallix
The point of Centrallix is two-fold. each purpose is handled in a separate layer:

1) Object System Management Layer (OSML): This layer provides a unified protocol for interacting (creating, reading, updating, deleting, etc) with data that is stored in multiple formats (text files, csv files, email attachments, StructureFiles and others).

2) Widget Layer: This layer provides a minimal framework (language) for creation of simple GUI displays that allow live interaction with data stored in the OSML.

    - It's currently (2008-06-25) implemented by parsing a widget definition into internal C storage (centrallix/expression (?)), then converted into DHTML which communicates to the OSML via http.

the HTTP implementation involves one other layer:

3) Traffic handling layer: This layer deals with the overhad management of HTTP (multiple threading, handling of HTTP requests, etc). At the time of Centrallix's original creation, much of what this layer does had no standard. At this point, a major refactoring to something like becoming an apache module would not be opposed to

### The Object System Management Layer
The 'Object System' (OS, ObjSys) is the **collection of data** that the OSML has access to (by default that will be everything in /var/centrallix/os).

A developer interacts with the ObjSys via **Object Sessions** (instances of the ObjSession struct) which are created via the objOpenSession() function.

The API for interacting with Object Sessions has two fundemental protocols for interaction: the first is very similar to **traversing a filesystem**, and the second is by using **ObjSys-SQL queries**;

### Traversing Object System like a filesystem
The only difference between using the OS and using a filesystem is that the OSML can 'change directories' into an actual file (unlike a filesystem). For example, if the current directory is a file on the HDD that contains the file 'records.csv', one can change the 'current directory' to be records.csv -- where there user can then 'cd' into either 'rows' or 'columns', and from there the user can 'ls' in order to view all the rows/columns.

It is also worth noting that because most input coming into the object system is validated, files or file sub-objects containing invalid 
UTF-8 in their names will be hidden. 

The C API for how developers use the Object System is currently found in centrallix/include/obj.h (and there might be another file somewhere that also contains C functions for interacting with the ObjSys).

#### ObjSys-path (ObjSys-pathname)
An ObjSys-path is a path to some information stored in the Object System. For example, in order to reference a particular widget in a widget tree that is defined in index.app, the ObjSys-path would be "/index.app/pnOptions/btnDemo". "/index.app" refers to the actual file, and then "/pnOptions" refers to the 'pane' widget (see the actual file in centrallix-os/index.app), and "/btnDemo" refers to the button inside that pane widget.

#### Directly testing/using OSML
One can create a binary file that directly accesses/tests the Object System by doing `make test_install` in centrallix module (note, this requires installation of the libreadline-dev package). This will compile a program called test_obj . test_obj brings up a prompt where you can navigate the Object System via OS-pathnames or retrieve data via OS-SQL.

#### ObjSys-SQL
see centrallix-doc/SQL.txt as well as online documentation.

### The Widget Layer
The Widget Layer is a higher-level layer which describes GUIs that allow users to interact with the OSML. The Widget layer is independent of any form of implementation. Widgets are described in widget files.

There are mulitple supported syntaxes for widget files. As of 2008-07-09, the following are supported:

* xml files

* "Structure files" (See 'StructureFile.txt' for an explanation of Structure Files.)

NOTE: as of 2008-07-09, _not_ all widgets are fully supported in the HTTP implementation and _not_ all widgets are actually documented.

A widget can serve one of multiple purposes:

1) Internal data management (the widget exists to help organize/contain other widgets)

2) GUI display (checkbox, label, childwindow, etc)

3) Event handling (All events are handled via the 'connector' widget.

4) Interaction with OSML (practically all interactions to OSML are handled via the 'osrc' (objectsource) widget.) (in HTTP implementation, this is where most asynchronous requests originate.)

#### Components
"Components" are the means for defining/using re-usable widget structures. There is a "widget/component" widget as well as a "widget/componentdecl" widget.

All widget structure definitions must be inside a page widget, or a componentdecl widget (there generally can be only one page widget on the client). To include that componentdecl in widget structure X, you must place an actual "component" widget in X (where the componentdecl should appear) that 'points' to the right componentdecl widget.

information related to HTTP implementation of components can be found in htdrv_component.js and htdrv_componentdecl.js .

#### Events in the Widget Layer
Here is an example of how events work (via the connector widget) (this may not actually be 100% correct):

```
$Version=2$
index "widget/page"
  {
  title = "Event Example";
  x = 0;
  y = 0;
  width = 600;
  height = 560;

  tbtn1 "widget/textbutton"
    {
    text = "Press Me";
    x = 0;
    y = 0;
    width = 50;
    height = 50;

    con1 "widget/connector"
      {
      event = "Click"; // Centrallix looks for a "widget/textbutton" event named "Selected".
      target = "html1"; // This is where Centrallix will look for an action with the name specified by action property.
      action = "LoadPage"; // This is the name of the action that will run when said event is triggered.

      // Any other attributes besides event, target, and action are assumed to be parameters being passed to the action. THEY ARE CASE SENSETIVE.
      Source = '/samples/fade_test1.html';
      }
    }

  html1 "widget/html"
    {
    x = 0;
    y = 0;
    width = 398;
    hight = 398;

    mode = dynamic;
    }
  }
```

### The HTTP implementation of Centrallix

The HTTP OSML implementation contains one other layer:

1) traffic handling

#### Traffic Handling
((Source files for this layer are found in centrallix/netdrivers))

((The function flow-chart might come in handy (see beginning of this README) ))

All request URIs are interpreted as an ObjSys-pathname (see centrallix-sysdoc/README section titled "ObjSys-path") except for request urls that start with "/INTERNAL" (which are handled differently).

If the requested information is an app file, then the server converts that file into DHTML and sends response to browser. Else, if it's another file, the server generally just sends back the file as a text file. If the requested URI is some sub-information inside a file (ie, a row inside a DB), then I think that the server just sends back some kind of an error.

Because all URIs are interpreted as ObjSys-pathnames, all files (including js files) must be inside the object system (by default that is /var/centrallix/os). The 'centrallix-os' module contains all server-side files (like js files) needed. Simply move all of centrallix-os's content into the object system folder.

NOTE: Since the centrallix-os module is where all data is, that is also where all js files are. They are in centrallix-os/sys/js. Please read the README file located there for an explanation of how centrallix handles javascript.

##### Server-Side HTML generation

see serverside_html_generation.txt

##### Client-Side javascript information

see javscript.txt

## Misc Notes

For other notes, see misc.txt
